This demo is going to explain how Distibuted Tracing works on Istio. Although Istio proxies are able 
to automatically send spans, they need some hints to tie together the entire trace. Applications need 
to propagate the appropriate HTTP headers so that when the proxies send span information, the spans 
can be correlated correctly into a single trace.

To do this, an application needs to collect and propagate the following headers from the incoming request
to any outgoing requests:

x-request-id
x-b3-traceid
x-b3-spanid
x-b3-parentspanid
x-b3-sampled
x-b3-flags
x-ot-span-context

Additionally, tracing integrations based on OpenCensus (e.g. Stackdriver) propagate the following headers:

x-cloud-trace-context
traceparent
grpc-trace-bin

--------------------------------------------------------------------------------

This demo consists of 5 mock microservices that forward the headers below to keep the track
of the traces. The architecture is shown in the picture `service-graph.png`.

istio_headers = [
'x-request-id',
'x-b3-traceid',
'x-b3-spanId',
'x-b3-parentspanid',
'x-b3-sampled',
'x-b3-flags',
'b3'
]

The service number 3 spans a request to two others; four-a and four-b. The image for this service
is `code-double`. All the other services just get the request and forward it to the next one. The
image for thosse is code-single.

code-single: viejo/jaeger-trace:10
code-doube: viejo/jaeger-trace:20

Deploy all the deployments and services (you can deploy `all-in-one.yaml`). Then create a curler pod,
and start the request with

# curl first-hop

--------------------------------------------------------------------------------

To configure as backend zipkin, we need to generate contol plane manifests as follows:

$ istioctl manifest generate --set profile=demo --set values.tracing.enabled=true --set values.tracing.provider=zipkin > istio-demo-with-zipkin.yaml
$ kubectl create -f istio-demo-with-zipkin.yaml