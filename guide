********************************************************************************
*                               DOWNLOAD ISTIO                                 *
********************************************************************************

> Get Istio latest stable release:

$ curl -L -s https://api.github.com/repos/istio/istio/releases | grep tag_name | sed "s/ *\"tag_name\": *\"\\(.*\\)\",*/\\1/" | sort -t"." -k 1,1 -k 2,2 -k 3,3 -k 4,4 | tail -n 1
1.5.1

> Download Istio

$ curl -L https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-linux.tar.gz | tar xz
# ISTIO_VERSION=1.5.1

> Verify cluster for installation

$ istioctl verify-install

--------------------------------------------------------------------------------
ALL in ONE

curl -L https://istio.io/downloadIstio | sh -

or a different version from latest

curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.4.7 sh -
--------------------------------------------------------------------------------

********************************************************************************
*                                ISTALL ISTIO                                  *
********************************************************************************
> Through yaml files

~/istio-1.5.1$ kubectl create -f install/kubernetes/istio-demo.yaml
~/istio-1.5.1$ kubectl get po -n istio-system
NAME                                      READY   STATUS      RESTARTS   AGE
grafana-584949b9c6-x8tck                  1/1     Running     0          118s
istio-citadel-9498b67cb-jskm6             1/1     Running     0          116s
istio-egressgateway-5665554778-zzqc7      1/1     Running     0          119s
istio-galley-866794c88f-td8db             1/1     Running     0          119s
istio-grafana-post-install-1.5.1-v57zv    0/1     Completed   0          2m5s
istio-ingressgateway-59767f9579-n7ntz     1/1     Running     0          118s
istio-pilot-5cfd46695-6w8bl               2/2     Running     2          117s
istio-policy-557bcf48c-8jsqc              2/2     Running     3          117s
istio-security-post-install-1.5.1-rfgw2   0/1     Completed   0          2m3s
istio-sidecar-injector-549f95c775-5ddpj   1/1     Running     0          115s
istio-telemetry-78f5cbf6d8-rwjlg          2/2     Running     3          117s
istio-tracing-68ffb9d456-jpx24            1/1     Running     0          115s
kiali-7d4cf866cc-4cpmj                    1/1     Running     0          117s
prometheus-8685f659f-bf4sm                1/1     Running     0          116s

~/istio-1.5.1$ kubectl get svc -n istio-system
NAME                        TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)                                                                                                                                      AGE
grafana                     ClusterIP      10.4.11.60    <none>         3000/TCP                                                                                                                                     2m38s
istio-citadel               ClusterIP      10.4.0.213    <none>         8060/TCP,15014/TCP                                                                                                                           2m38s
istio-egressgateway         ClusterIP      10.4.13.50    <none>         80/TCP,443/TCP,15443/TCP                                                                                                                     2m38s
istio-galley                ClusterIP      10.4.13.10    <none>         443/TCP,15014/TCP,9901/TCP                                                                                                                   2m38s
istio-ingressgateway        LoadBalancer   10.4.8.159    34.65.199.49   15020:30854/TCP,80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:31023/TCP,15030:31452/TCP,15031:30065/TCP,15032:30522/TCP,15443:30206/TCP   2m38s
istio-pilot                 ClusterIP      10.4.13.240   <none>         15010/TCP,15011/TCP,8080/TCP,15014/TCP                                                                                                       2m38s
istio-policy                ClusterIP      10.4.9.133    <none>         9091/TCP,15004/TCP,15014/TCP                                                                                                                 2m38s
istio-sidecar-injector      ClusterIP      10.4.3.221    <none>         443/TCP,15014/TCP                                                                                                                            2m37s
istio-telemetry             ClusterIP      10.4.12.248   <none>         9091/TCP,15004/TCP,15014/TCP,42422/TCP                                                                                                       2m38s
jaeger-agent                ClusterIP      None          <none>         5775/UDP,6831/UDP,6832/UDP                                                                                                                   2m32s
jaeger-collector            ClusterIP      10.4.3.172    <none>         14267/TCP,14268/TCP,14250/TCP                                                                                                                2m32s
jaeger-collector-headless   ClusterIP      None          <none>         14250/TCP                                                                                                                                    2m32s
jaeger-query                ClusterIP      10.4.0.215    <none>         16686/TCP                                                                                                                                    2m33s
kiali                       ClusterIP      10.4.9.236    <none>         20001/TCP                                                                                                                                    2m38s
prometheus                  ClusterIP      10.4.14.83    <none>         9090/TCP                                                                                                                                     2m38s
tracing                     ClusterIP      10.4.13.178   <none>         80/TCP                                                                                                                                       2m32s
zipkin                      ClusterIP      10.4.0.98     <none>         9411/TCP                                                                                                                                     2m32s

Note: This way we are installing absolutely all istio components.

> Through istioctl (without mTLS)

~/istio-1.5.1$ export PATH=$PWD/bin:$PATH
~/istio-1.5.1$ istioctl manifest apply --set profile=PROFILE
#https://istio.io/docs/setup/additional-setup/config-profiles/

>> Example: PROFILE=default
...

✔ Installation complete

~/istio-1.5.1$ kubectl get po -n istio-system
NAME                                    READY   STATUS    RESTARTS   AGE
istio-ingressgateway-5f54974979-qdjng   1/1     Running   0          4m39s
istiod-6548b95486-f8qrj                 1/1     Running   0          5m2s
prometheus-6c88c4cb8-j7lhf              2/2     Running   0          4m39s

~/istio-1.5.1$ kubectl get svc -n istio-system
NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE
istio-ingressgateway   LoadBalancer   10.103.239.128   <pending>     15020:30524/TCP,80:31125/TCP,443:32271/TCP,15029:32096/TCP,15030:30395/TCP,15031:30720/TCP,15032:30594/TCP,15443:31510/TCP,31400:31177/TCP   4m46s
istio-pilot            ClusterIP      10.102.55.228    <none>        15010/TCP,15011/TCP,15012/TCP,8080/TCP,15014/TCP,443/TCP                                                                                     5m9s
istiod                 ClusterIP      10.107.246.36    <none>        15012/TCP,443/TCP                                                                                                                            5m9s
prometheus             ClusterIP      10.107.51.94     <none>        9090/TCP                                                                                                                                     4m46s

>>> with mTLS

~/istio-1.5.1$ istioctl manifest apply --set profile=demo --set values.global.mtls.enabled=true
...

✔ Installation complete

~/istio-1.5.1$ kubectl get po -n istio-system
NAME                                    READY   STATUS    RESTARTS   AGE
grafana-5cc7f86765-7xq9r                1/1     Running   0          27s
istio-egressgateway-598d7ffc49-6ds76    1/1     Running   0          29s
istio-ingressgateway-7bd5586b79-8fht8   1/1     Running   0          29s
istio-tracing-8584b4d7f9-gm4df          1/1     Running   0          27s
istiod-646b6fcc6-bx6nv                  1/1     Running   0          41s
kiali-696bb665-8rtkr                    1/1     Running   0          27s
prometheus-6c88c4cb8-lwnjl              2/2     Running   0          27s

~/istio-1.5.1$ kubectl get svc -n istio-system
NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE
grafana                     ClusterIP      10.110.228.83    <none>        3000/TCP                                                                                                                                     105m
istio-egressgateway         ClusterIP      10.101.29.207    <none>        80/TCP,443/TCP,15443/TCP                                                                                                                     105m
istio-ingressgateway        LoadBalancer   10.111.195.25    <pending>     15020:32547/TCP,80:32421/TCP,443:30247/TCP,15029:30154/TCP,15030:31617/TCP,15031:32565/TCP,15032:32205/TCP,31400:32022/TCP,15443:30109/TCP   105m
istio-pilot                 ClusterIP      10.107.189.136   <none>        15010/TCP,15011/TCP,15012/TCP,8080/TCP,15014/TCP,443/TCP                                                                                     105m
istiod                      ClusterIP      10.101.101.18    <none>        15012/TCP,443/TCP                                                                                                                            105m
jaeger-agent                ClusterIP      None             <none>        5775/UDP,6831/UDP,6832/UDP                                                                                                                   105m
jaeger-collector            ClusterIP      10.106.249.102   <none>        14267/TCP,14268/TCP,14250/TCP                                                                                                                105m
jaeger-collector-headless   ClusterIP      None             <none>        14250/TCP                                                                                                                                    105m
jaeger-query                ClusterIP      10.104.188.176   <none>        16686/TCP                                                                                                                                    105m
kiali                       ClusterIP      10.97.172.28     <none>        20001/TCP                                                                                                                                    105m
prometheus                  ClusterIP      10.97.129.225    <none>        9090/TCP                                                                                                                                     105m
tracing                     ClusterIP      10.99.141.149    <none>        80/TCP                                                                                                                                       105m
zipkin                      ClusterIP      10.100.34.112    <none>        9411/TCP                                                                                                                                     105m

> Through Helm
HETO

********************************************************************************
*                              CHECK/CHANGE mTLS                               *
********************************************************************************

> Check mesh mode

$ kubectl get meshpolicy -oyaml | grep mode
    mode: PERMISSIVE
    
# When PERMISSIVE mode is enabled, a service can accept both plain text and mutual
# TLS traffic. In order to only allow mutual TLS traffic, the configuration needs
# to be changed to STRICT mode.

--------------------------------------------------------------------------------

********************************************************************************
*                               DEPLOY AN APP                                  *
********************************************************************************

> Prepare a namespace to automatically add envoy proxies

$ kubectl create ns istio
$ kubectl label namespace istio istio-injection=enabled

$ kubectl get namespace -L istio-injection
NAME              STATUS   AGE     ISTIO-INJECTION
default           Active   96d
istio             Active   7m38s   enabled
istio-system      Active   26m     disabled
kube-node-lease   Active   4h54m
kube-public       Active   96d
kube-system       Active   96d

> Prepare the Deployment yaml file with istioctl

# To output a ready file to deploy with the sidecar
$ istioctl kube-inject -f example-app.yaml -o example-app-istio.yaml

# We can also pipe it to kubectl
$ istioctl kube-inject -f example-app.yaml | kubectl apply -f -

>>> Example:

# Deploy nginx pod in istioctl namespace and curler in default namespace
# Reach nginx service from curler

$ kubectl run nginx --image nginx -n istio
$ kubectl expose deploy nginx -n istio --port 80
$ kubectl run -it curler --image viejo/curl sh
/ # curl -I nginx.istio
HTTP/1.1 200 OK
Server: nginx/1.17.9
Date: Wed, 08 Apr 2020 17:53:30 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 03 Mar 2020 14:32:47 GMT
Connection: keep-alive
ETag: "5e5e6a8f-264"
Accept-Ranges: bytes

# Now change the meshPolicy mode to STRICT and curl the service again

$ kubectl edit meshpolicy
    mode: STRICT

$ kubectl exec -it curler-6885d9fd97-c96tc sh
/ # curl -I nginx.istio
curl: (56) Recv failure: Connection reset by peer 

# Now create the curler pod in istio namespace, and curl the service again

$ kubectl run -it curler --image viejo/curl -n istio sh
/ # curl -I nginx.istio
HTTP/1.1 200 OK
server: envoy
date: Wed, 08 Apr 2020 18:01:35 GMT
content-type: text/html
content-length: 612
last-modified: Tue, 03 Mar 2020 14:32:47 GMT
etag: "5e5e6a8f-264"
accept-ranges: bytes
x-envoy-upstream-service-time: 8

--------------------------------------------------------------------------------

********************************************************************************
*                       CHANGE SPECIFIC SERVICE POLICY                         *
********************************************************************************
> Change service nginx's Policy to PERMISSIVE

# Use the Policy ibject below to change nginx service's Policy to PERMISSIVE and
# curl it from the curler in the default namespace.

$ kubectl exec -it curler-6885d9fd97-c96tc sh
/ # curl -I nginx.istio
curl: (56) Recv failure: Connection reset by peer

$ cat <<EOF | kubectl create -n istio -f -
apiVersion: "authentication.istio.io/v1alpha1"
kind: "Policy"
metadata:
  name: nginx
  namespace: istio
spec:
  targets:
  - name: nginx
  peers:
  - mtls:
      mode: PERMISSIVE
EOF

policy.authentication.istio.io/nginx created
$ kubectl exec -it curler-6885d9fd97-c96tc sh
/ # curl -I nginx.istio
HTTP/1.1 200 OK
Server: nginx/1.17.9
Date: Wed, 08 Apr 2020 18:29:59 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 03 Mar 2020 14:32:47 GMT
Connection: keep-alive
ETag: "5e5e6a8f-264"
Accept-Ranges: bytes

# Ya hemos visto que podemos acceder al mesh cambiado el modo de meshpolicy a
# PERMISSIVE y deshabilitando la configuración envoy del servicio nginx con un
# objeto Policy (enpecificando, dentro del Policy, )
### PREGUNTA
# Qué otras formas hay de entrar al mesh?
# - Ninguna! NO se puede acceder al mesh, protegido por mTLS, sin envoy proxy; 
#   con la configuración adecuada!
# 
# Lo que sí se puede hacer es extender el mesh, inyectando un envoy sidecar al
# curler.

--------------------------------------------------------------------------------

********************************************************************************
*                        CHANGE MESH OUTGOING POLICY                           *
********************************************************************************
# Y salir del mesh? Se puede salir? Veamos

$ kubectl run -it alpine --image alpine -n istio sh
/ # apk update
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz
v3.11.5-41-g3deb517cec [http://dl-cdn.alpinelinux.org/alpine/v3.11/main]
v3.11.5-39-g0b5b5381b3 [http://dl-cdn.alpinelinux.org/alpine/v3.11/community]
OK: 11268 distinct packages available

# al parecer sí se puede salir.
# Esto es debido a una configuración dentro del istio-system. La configuración se
# encuentra en el configMap istio, en el namespace istio-system

$ kubectl get cm istio -n istio-system -oyaml | grep -B1 mode:
    outboundTrafficPolicy:
      mode: ALLOW_ANYY
      
# Este ALLOW_ANY se refiere al tráfico hacía fuera del mesh. Ahora mismo se puede
# acceder a cualquier servicio externo.
#
# Cámbialo a REGISTRY_ONLY, y prueba otra vez
# https://istio.io/docs/tasks/traffic-management/egress/egress-control/

$ kubectl exec -it alpine-7b8bb54698-qsfgj -n istio sh
/ # apk update
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz
ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.11/main: remote server returned error (try 'apk update')
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz
ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.11/community: remote server returned error (try 'apk update')
v3.11.5-41-g3deb517cec [http://dl-cdn.alpinelinux.org/alpine/v3.11/main]
v3.11.5-39-g0b5b5381b3 [http://dl-cdn.alpinelinux.org/alpine/v3.11/community]
2 errors; 11268 distinct packages available

# Esto funciona sólo en modo STRICT de meshPolicy.

--------------------------------------------------------------------------------
HASTA AQUÍ EL PERÍMETRO DEL MESH DE ISTIO
--------------------------------------------------------------------------------

********************************************************************************
*                                 ROUTING                                      *
********************************************************************************
Explicar:
  - Gateway
  - VirtualService
  - DestinationRule
  - ServiceEntry
  
> Empezar ejemplo 1.- ingress

# Crear el secret para el Gateway para `domain.com`

$ openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=domain Inc./CN=domain.com' -keyout domain.com.key -out domain.com.crt
$ openssl req -out ackstorm.domain.com.csr -newkey rsa:2048 -nodes -keyout ackstorm.domain.com.key -subj "/CN=ackstorm.domain.com/O=ackstorm organization"
$ openssl x509 -req -days 365 -CA domain.com.crt -CAkey domain.com.key -set_serial 0 -in ackstorm.domain.com.csr -out ackstorm.domain.com.crt

$ kubectl create -n istio-system secret tls istio-ingressgateway-certs --key ackstorm.domain.com.key --cert ackstorm.domain.com.crt

# Check and see if the certs are under /etc/istio/ingressgateway-certs path; in
# istio-ingressgateway pod.

# Crear los objetos configMap, Deployments y el Service

$ kubectl create -f ... -f ... -n istio

# los dos deployments están sirviendo en /path1/. hacer una prueba básica para 
# ver que funciona.

$ kubectl run -ti curler --image viejo/curl -n istio sh
/ # for i in `seq 1 10`; do curl server/path1/; echo; done
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>

# Ahora vamos a crear los objectos de Istio (Gateway, VirtualService y DestinationRule)

$ kubectl create -f ... -f ... -n istio

# Es posible que nos devuelva un 404. La razón es porque curl lo resuelve al
# ackstorm.domain.com, que existe, y no es capaz de redirigirlo correctamente.

$ curl -H "Host: ackstorm.domain.com" 34.65.150.207/adios/ -ILk
HTTP/1.1 301 Moved Permanently
location: https://ackstorm.domain.com/adios/
date: Thu, 09 Apr 2020 01:20:55 GMT
server: istio-envoy
transfer-encoding: chunked

HTTP/1.1 404 Not Found
Date: Thu, 09 Apr 2020 01:20:56 GMT
Content-Type: text/html
Content-Length: 867
Connection: keep-alive
Keep-Alive: timeout=30
Server: Apache/2
X-Robots-Tag: noindex, nofollow
Last-Modified: Fri, 10 Jan 2020 16:05:10 GMT
Accept-Ranges: bytes

# Se puede resolver de dos formas.
#
# 1.- Añadiendo `34.65.150.207  ackstorm.domain.com` al /etc/hosts
# 2.- forzando a curl a resolverlo siempre
# 
# La segunda opción se demuestra abajo

$ for i in {1..10}; do curl --resolve ackstorm.domain.com:443:34.65.150.207 https://ackstorm.domain.com:443/adios/ -k; echo; done
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>

$ for i in {1..10}; do curl -H "end-user: ackstorm" --resolve ackstorm.domain.com:443:34.65.150.207 https://ackstorm.domain.com:443/hola/ -k; echo; done
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - APACHE</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>
<h1>THIS IS AN ISTIO DEMO - NGINX</h1>

# Recordemos que estabamos en modo PERMISSIVE, con ALLOW_ALY para outgoing traffic.
# Vamos a cambiar el modo de PERMISSIVE a STRICT, y volver a hacer el curl.

$ kubectl edit meshpolicy
$ curl --resolve ackstorm.domain.com:443:34.65.150.207 https://ackstorm.domain.com:443/adios/ -Ik
HTTP/2 503
content-length: 95
content-type: text/plain                <- plain text. Es por eso que falla
date: Thu, 09 Apr 2020 01:59:07 GMT
server: istio-envoy

# Vamos a crear un DestinationRule para decirle a Istio qué servicio debería usar
# mtls. El DestinationRule es dr-server.yaml.

$ kubectl create -f ... -n istio
destinationrule.networking.istio.io/mtls-for-server created

$ curl --resolve ackstorm.domain.com:443:34.65.150.207 https://ackstorm.domain.com:443/adios/ -Ik
HTTP/2 200
server: istio-envoy
date: Thu, 09 Apr 2020 02:04:31 GMT
content-type: text/html                 <- ahora ya no es plain text
content-length: 38
last-modified: Thu, 09 Apr 2020 00:39:58 GMT
etag: "5e8e6ede-26"
accept-ranges: bytes
x-envoy-upstream-service-time: 7

# Por último, vamos a crear otro servicio nginx-bis, y vamos a intentar llegar 
# desde el curler en el mismo namespace. Recordemos que estamos en STRICT mode
# aún.

$ kubectl exec -it curler-6885d9fd97-rbcpn -n istio -- curl nginx-bis
upstream connect error or disconnect/reset before headers. reset reason: connection termination

# Creemos el DestinationRule dr-nginx-bis.yaml, y volvamos a hacer el request.
# los DestinationRule se aplican en dos escenarios. O tiene que estar en el ns
# istio-system, o en el namespace del servidor. En este caso lo haremos en el ns
# istio-system, lo que hará que todos los servicios se comuniquen por mTLS.

$ kubectl create -f dr-nginx-bis.yaml
$ kubectl exec -it curler-6885d9fd97-rbcpn -n istio -- curl nginx-bis
...
<title>Welcome to nginx!</title>

--------------------------------------------------------------------------------

********************************************************************************
*                                  EGRESS                                      *
********************************************************************************

# Para el egress, tenemos que tener en cuenta dos cosas. La primera es que si la
# política de tráfico externo no está puesto en ALLOW_ANY, tengo que tener los
# servicios; a los que espero acceder, en un ServiceEntry. Y la segunda es si quier
# acceder a esos servicios directamente desde el pod o desde un punto centralizado;
# como istio-egressgateway.
#
# Vamos a poner el mesh en modo REGISTRY_ONLY. Recordemos que no podemos acceder
# a ningún servicio. Vamos a ver cómo lo solucionamos.

...
configmap/istio edited
$ kubectl exec -it alpine-7b8bb54698-qsfgj -n istio sh
/ # apk update
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz
ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.11/main: remote server returned error (try 'apk update')
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz
ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.11/community: remote server returned error (try 'apk update')
v3.11.5-41-g3deb517cec [http://dl-cdn.alpinelinux.org/alpine/v3.11/main]
v3.11.5-39-g0b5b5381b3 [http://dl-cdn.alpinelinux.org/alpine/v3.11/community]
2 errors; 11268 distinct packages available

# Para poder hacer `apk update`, necesitamos acceso a `alpinelinux.org`. Vamos a
# crear un ServiceEntry para `alpinelinux.org`. El service entry se encuentra en
# el ficher egress, y se llama se-alpine.yaml.

$ kubectl create -f se-alpine.yaml -n istio
serviceentry.networking.istio.io/se-alpinelinux created
$ kubectl exec -it alpine-7b8bb54698-qsfgj -n istio sh
/ # apk update
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz
v3.11.5-41-g3deb517cec [http://dl-cdn.alpinelinux.org/alpine/v3.11/main]
v3.11.5-39-g0b5b5381b3 [http://dl-cdn.alpinelinux.org/alpine/v3.11/community]
OK: 11268 distinct packages available
/ #

# Ahora vamos a probar salir por istio-egressgateway. Queremos hacer las llamadas
# al ackstorm.com. Pero aún ni siquiera puedo llegar a ackstorm.com

/ # curl -sL -o /dev/null -D - http://ackstorm.com/ 2>/dev/null
HTTP/1.1 502 Bad Gateway
location: http://ackstorm.com/
date: Thu, 09 Apr 2020 03:01:01 GMT
server: envoy
content-length: 0

# Vamos a crear el ServiceEntry se-ack.yaml, y probarlo otra vez.
$ kubectl create -f se-ack.yaml -n istio
$ kubectl exec -it alpine-7b8bb54698-qsfgj -n istio sh
/ # curl -sL -o /dev/null -D - http://ackstorm.com/ 2>/dev/null
HTTP/1.1 302 Found
location: https://ackstorm.com:443/
date: Thu, 09 Apr 2020 03:02:16 GMT
content-length: 5
content-type: text/plain; charset=utf-8
x-envoy-upstream-service-time: 30
server: envoy

HTTP/2 301
cache-control: max-age=3600
content-type: text/html; charset=UTF-8
date: Thu, 09 Apr 2020 03:02:16 GMT
expires: Thu, 09 Apr 2020 04:02:17 GMT
location: https://www.ackstorm.com/
server: Apache/2.4.38 (Debian)
vary: Accept-Encoding,Cookie
x-powered-by: PHP/7.2.29
x-redirect-by: WordPress
content-length: 0

HTTP/2 200
cache-control: max-age=3, must-revalidate
content-type: text/html; charset=UTF-8
date: Thu, 09 Apr 2020 03:02:18 GMT
vary: Accept-Encoding,Cookie, X-Device, X-Vary-TCDN
age: 0
tp-cache: MISS
accept-ranges: bytes

# Ya podemos llegar! Vamos a configurar el mesh, para que el tráfico hacía la
# página de ackstorm salga por istio-egressgateway. para ello, vamos a crear los
# objetos Gateway, VirtualService y DestinationRule del fichero egress.
#
# Volvemos a hacer la llamada, pero esta vez vamos a poner el ojo en los logs de
# istio-egressgateway

@Terminal_1
$ kubectl logs -f istio-egressgateway-b647d487b-67gvg -n istio-system

# Después de la llamada del Terminal_1
[2020-04-09T03:12:28.979Z] "GET / HTTP/2" 302 - "-" "-" 0 5 19 15 "10.56.1.47" "curl/7.67.0" "5c6e8d6f-5d76-9508-acc8-52f7cc9bd8c0" "ackstorm.com" "146.148.10.209:80" outbound|80||ackstorm.com - 10.56.1.41:80 10.56.1.47:53534 ackstorm.com -

@Terminal_2
$ kubectl exec -it alpine-7b8bb54698-qsfgj -n istio sh
Defaulting container name to alpine.
Use 'kubectl describe pod/alpine-7b8bb54698-qsfgj -n istio' to see all of the containers in this pod.
/ # curl -sL -o /dev/null -D - http://ackstorm.com/ 2>/dev/null
HTTP/1.1 302 Found
location: https://ackstorm.com:443/
date: Thu, 09 Apr 2020 03:11:10 GMT
content-length: 5
content-type: text/plain; charset=utf-8 
x-envoy-upstream-service-time: 41  
server: envoy

HTTP/2 301
cache-control: max-age=3600
content-type: text/html; charset=UTF-8
date: Thu, 09 Apr 2020 03:11:11 GMT
expires: Thu, 09 Apr 2020 04:11:11 GMT
location: https://www.ackstorm.com/
server: Apache/2.4.38 (Debian)
vary: Accept-Encoding,Cookie
x-powered-by: PHP/7.2.29
x-redirect-by: WordPress
content-length: 0

HTTP/2 200
cache-control: max-age=3, must-revalidate
content-type: text/html; charset=UTF-8
date: Thu, 09 Apr 2020 03:11:12 GMT
vary: Accept-Encoding,Cookie, X-Device, X-Vary-TCDN
age: 0
tp-cache: MISS
accept-ranges: bytes

# istio-egressgateway utiliza los certificado del directorio del objeto Gateway
# para hacer las llamadas.

$ kubectl exec -it istio-egressgateway-b647d487b-67gvg -n istio-system bash
root@istio-egressgateway-b647d487b-67gvg:/# ls /etc/certs
cert-chain.pem  key.pem  root-cert.pem

--------------------------------------------------------------------------------


********************************************************************************
*                                 TRACING                                      *
********************************************************************************


# modes here: https://istio.io/docs/reference/config/networking/destination-rule/#TLSSettings-TLSmode